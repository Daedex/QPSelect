http://www.engineeringtoolbox.com/circles-within-rectangle-d_1905.html

<script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div><div><p>The calculator below estimates the maximum number of circles that may fit in a rectangle. The calculator can be used to calculate</p> <ul> <li>the number of pipes or wires that fits in a conduit and similar applications</li> </ul> <p>Input the rectangle <span style="text-decoration: underline;">inside</span> dimensions - height and width,&nbsp; and the circles <span style="text-decoration: underline;">outside</span> diameters.</p> <p>Default values are for <em>0.5 inch</em> circles inside a <em>10 inch x 10 inch</em> square. The calculator is generic and any kind of units can be used - as long as the same units are used for all values.</p> <div><form> <p style="padding-left: 30px;"><input id="rw" name="rw" value="10" type="number" /> <em>Width Rectangle (in, mm, m)</em></p> <p style="padding-left: 30px;"><input id="rh" name="rh" value="10" type="number" /> <em>Height Rectangle (in, mm, m)</em></p> <p style="padding-left: 30px;"><input id="cd" name="cd" value="0.5" type="number" /> <em>Outside Diameter Circles (in, mm, m)</em></p> <p style="padding-left: 30px;"><input value="calculate!" onclick="calculateRectangle(); calculateRectangle2();" type="button" /></p> </form></div> <h3>Rectangular Pattern</h3> <p id="results">&nbsp;</p> <div class="center"><canvas id="myCanvas" width="400" height="400">&nbsp;</canvas></div> <h3>Triangular Pattern</h3> <p id="results2">&nbsp;</p> <div class="center"><canvas id="myCanvas2" width="400" height="400">&nbsp;</canvas></div></div><script>
 function Circle(x, y, r){
	this.x = x;
  this.y = y;
  this.r = r;
}

function Rectangle(x, y, w, h){
	this.x = x;
  this.y = y;
  this.w = w;
  this.h = h;  
}

function calculateRectangle(){
  var rw = $j("#rw").val() * 1;
  var rh = $j("#rh").val() * 1;
	var cd = $j("#cd").val() * 1;
  var canvas = document.getElementById('myCanvas');
  var context = canvas.getContext('2d');
	context.clearRect(0, 0, canvas.width, canvas.height);
  var scale = canvas.width / rw; 
  if (canvas.height / rh < scale) scale = canvas.height / rh;
  var rectangleOuter = new Rectangle(0, 0, rw, rh);
	drawRectangle(rectangleOuter, "yellow", 2, "black");
  var circleArray = [];
  if (cd < rw && cd < rh) {
    var posX = cd / 2;
    var posY = cd / 2;
    do  {
      do {
        var circle = new Circle(posX, posY, cd / 2);
        circleArray.push(circle);
        posX = posX + cd;
      } while (posX + cd / 2 <= rw);
    	posX = cd / 2;
      posY = posY + cd;
    } while (posY + cd / 2 <= rh);
    $j("#results").html("Maximum number of circles innside the rectangle: <b><u>" + circleArray.length + "</u></b>");
  }  
  for (var i = 0; i < circleArray.length; i++) {
     drawCircle(circleArray[i], "white", 1, "black");
  }
  function drawRectangle(rectangle, color, width, colorStroke){
     context.beginPath();
     context.rect(rectangle.x * scale, rectangle.y * scale, rectangle.w * scale, rectangle.h * scale);
     context.fillStyle = color;
     context.fill();
     context.lineWidth = width;
     context.strokeStyle = colorStroke;
     context.stroke();   
  }    
  function drawCircle(circle, color, width, colorStroke){
      context.beginPath();
      context.arc(circle.x * scale, circle.y * scale, circle.r * scale, 0, 2 * Math.PI, false);
      context.fillStyle = color;
      context.fill();
      context.lineWidth = width;
      context.strokeStyle = colorStroke;
      context.stroke();    
  }   
}


function calculateRectangle2(){
  var rw = $j("#rw").val() * 1;
  var rh = $j("#rh").val() * 1;
	var cd = $j("#cd").val() * 1;
  var canvas = document.getElementById('myCanvas2');
  var context = canvas.getContext('2d');
	context.clearRect(0, 0, canvas.width, canvas.height);
  var scale = canvas.width / rw; 
  if (canvas.height / rh < scale) scale = canvas.height / rh;
  var rectangleOuter = new Rectangle(0, 0, rw, rh);
	drawRectangle(rectangleOuter, "yellow", 2, "black");
  var circleArray = [];
  if (cd < rw && cd < rh) {
    var posX = cd / 2;
    var posY = cd / 2;
    var triangle = 0;
    do  {
      do {
        var circle = new Circle(posX, posY, cd / 2);
        circleArray.push(circle);
        posX = posX + cd;
      } while (posX + cd / 2 <= rw);
      if (triangle == 0){
	    	posX = cd;
        triangle = 1;
      } else {
      	posX = cd / 2;
        triangle = 0;
      }
      posY = posY + Math.pow(Math.pow(cd,2) * 0.75,0.5);        
    } while (posY + cd / 2 <= rh);
    $j("#results2").html("Maximum number of circles innside the rectangle: <b><u>" + circleArray.length + "</u></b>");
  }  
  for (var i = 0; i < circleArray.length; i++) {
     drawCircle(circleArray[i], "white", 1, "black");
  }
  function drawRectangle(rectangle, color, width, colorStroke){
     context.beginPath();
     context.rect(rectangle.x * scale, rectangle.y * scale, rectangle.w * scale, rectangle.h * scale);
     context.fillStyle = color;
     context.fill();
     context.lineWidth = width;
     context.strokeStyle = colorStroke;
     context.stroke();   
  }    
  function drawCircle(circle, color, width, colorStroke){
      context.beginPath();
      context.arc(circle.x * scale, circle.y * scale, circle.r * scale, 0, 2 * Math.PI, false);
      context.fillStyle = color;
      context.fill();
      context.lineWidth = width;
      context.strokeStyle = colorStroke;
      context.stroke();    
  }   
}

calculateRectangle();
calculateRectangle2();
















</script>